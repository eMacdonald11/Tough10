<!DOCTYPE html>
<html lang="en">
<head>
  <title>PACE KEEPER</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">

  <style>
    /* Overall Page Layout */
    body {
      font-family: 'Open Sans', sans-serif;
      text-align: center;
      background: #ECE7D8;
      color: #333;
      margin: 0;
      padding: 2rem;
      box-sizing: border-box;
      overflow-x: hidden; /* avoids horizontal scrolling */
    }
    .container {
      background: #F9F8F3;
      max-width: 650px;
      margin: 0 auto;
      padding: 2rem;
      border-radius: 10px;
      border: 1px solid #DDD;
      box-sizing: border-box;
    }
    h1 {
      color: #556B2F;
      margin-bottom: 1rem;
      font-size: 1.5rem;
    }

    /* Single container for exercise info + chart, always visible */
    #exercise-info {
      margin: 0 auto 1rem auto;
      width: 100%;
      max-width: 300px;
    }
    #exercise-heading {
      font-weight: bold;
      font-size: 1.125rem;
      margin-bottom: 0.5rem;
    }
    #exercise-chart {
      margin-bottom: 0.5rem;
    }

    /* Timer Containers */
    .timer-container {
      display: block;
      margin: 0 auto 1rem auto;
      background: #ffc87f;
      padding: 1rem;
      border-radius: 5px;
      border: 1px solid #EEE;
      width: 100%;
      max-width: 300px;
      font-weight: bold;
      text-align: center;
      box-sizing: border-box;
    }

    /* Input Form => Now a real <form> so pressing Enter triggers submit */
    #input-form {
      display: none;
      margin: 1rem auto 0 auto;
      width: 100%;
      max-width: 300px;
      background: #FFF;
      padding: 1rem;
      border-radius: 5px;
      border: 1px solid #EEE;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
      text-align: left;
      box-sizing: border-box;
    }
    #input-form h3 {
      margin-top: 0;
      margin-bottom: 0.75rem;
      font-size: 1.125rem;
      color: #556B2F;
      text-align: center;
    }
    .input-row {
      margin-bottom: 1rem;
    }
    .input-row label {
      display: block;
      font-weight: 600;
      font-size: 1rem;
      margin-bottom: 0.5rem;
      color: #333;
    }
    .input-row input[type="number"] {
      width: 100%;
      font-size: 1rem;
      padding: 0.5rem;
      margin-bottom: 0.5rem;
      border: 1px solid #CCC;
      border-radius: 3px;
      box-sizing: border-box;
    }
    #input-form button {
      display: block;
      width: 100%;
      margin: 0.5rem auto 0 auto;
      padding: 0.75rem 1.25rem;
      font-size: 1rem;
      font-weight: 700;
      background: #A0522D;
      color: #fff;
      border: 2px solid #8C4528;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
      box-sizing: border-box;
    }
    #input-form button:hover {
      background: #8C4528;
    }
    .feedback {
      margin-top: 0.5rem;
      font-size: 0.875rem;
      color: green;
    }

    /* Rep Animation (Type1) */
    .rep-animation-container {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 0.5rem;
    }
    .vertical-bar {
      width: 60px;
      height: 150px;
      background: #ddd;
      border-radius: 4px;
      overflow: hidden;
      position: relative;
    }
    .vertical-fill {
      width: 100%;
      height: 100%;
      background: #556B2F;
      position: absolute;
      transform-origin: bottom;
      animation: drainFill 5s infinite;
    }
    @keyframes drainFill {
      0% { transform: scaleY(1); }
      80% { transform: scaleY(0); }
      100% { transform: scaleY(1); }
    }
    .rep-countdown {
      font-size: 2.5rem;
      font-weight: bold;
      margin-left: 12px;
      width: 100px;
    }

    /* "I'm Ready!" Button */
    #ready-button {
      display: block;
      margin: 1rem auto 0 auto;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      font-weight: 700;
      background: #556B2F;
      color: #ffffff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
      box-sizing: border-box;
    }
    #ready-button:hover {
      background: #3F4E24;
    }

    /* 4×3 table for Type1 */
    .type1-table {
      width: 100%;
      border-collapse: collapse;
      margin: 0.5rem auto;
      max-width: 300px;
      font-size: 0.9rem;
    }
    .type1-table th,
    .type1-table td {
      padding: 0.4rem;
      text-align: center;
      border: 1px solid #EEE;
      white-space: nowrap;
    }
    .type1-table .best-row {
      background: #ffe0b3;
      font-weight: 700;
    }

    @media (min-width: 601px) {
      body { padding: 2rem; }
    }
    @media (max-width: 600px) {
      body { padding: 1rem; }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>TOUGH10</h1>

    <!-- 
      #exercise-info: always visible
      => "Exercise Name - Set X of Y" + chart if type1 or fallback
    -->
    <div id="exercise-info">
      <div id="exercise-heading"></div>
      <div id="exercise-chart"></div>
      <button id="ready-button" onclick="readyButtonClicked()">I'm Ready!</button>
    </div>

    <!-- 15s prep -->
    <div id="prep-timer" class="timer-container" style="display:none;">
      Prepare to begin in: <span id="prep-remaining">15</span>s
    </div>

    <!-- ACTIVE EXERCISE Timer -->
    <div id="timer" class="timer-container" style="display:none;">
      Time Remaining: <span id="time-remaining">30</span>s
    </div>

    <!-- REST Timer -->
    <div id="rest-timer" class="timer-container" style="display:none;">
      Next set begins in: <span id="rest-remaining">30</span>s
    </div>

    <!-- PERFORMANCE DATA FORM => Now a real <form> so hitting Enter triggers submitSetData -->
    <form id="input-form" onsubmit="event.preventDefault(); submitSetData();">
      <h3>Enter Your Set Data</h3>
      <div class="input-row">
        <label for="weight-input">Weight</label>
        <input type="number" id="weight-input" placeholder="lbs">
      </div>
      <div class="input-row">
        <label for="reps-input">Reps</label>
        <input type="number" id="reps-input" placeholder="reps">
      </div>
      <button type="submit">Submit</button>
      <div class="feedback" id="feedback-message"></div>
    </form>

    <!-- AUDIO -->
    <audio id="countdown" src="/audio/countdown.mp3" preload="auto"></audio>
    <audio id="bell" src="/audio/bell.mp3" preload="auto"></audio>
    <audio id="halfway-sound" src="/audio/halfway.mp3" preload="auto"></audio>
    <audio id="silent-audio" src="/audio/silent.mp3" preload="auto"></audio>

    <script>
      const type1Percentages = { 1: 0.70, 2: 0.85, 3: 1.00 };
      function roundToNearest5(v){ return Math.round(v/5)*5; }

      const workout = JSON.parse('<%- JSON.stringify(workout) %>');
      const EXERCISE_INFO = [
        { sets: 3, exerciseDuration: 50, intraRest: 30, postExerciseRest: 60 },
        { sets: 4, exerciseDuration: 30, intraRest: 20, postExerciseRest: 60 },
        { sets: 1, exerciseDuration: 90, intraRest: 0,  postExerciseRest: 0 }
      ];

      let currentExerciseIndex = 0;
      let currentSet = 1;
      let timeRemaining, timerInterval, halfwayPlayed = false;
      let restTimeRemaining, restInterval;
      let prepTimeRemaining = 15, prepInterval;
      let repCountdownInterval;

      // DOM
      const exerciseInfoEl   = document.getElementById('exercise-info');
      const exerciseHeadingEl= document.getElementById('exercise-heading');
      const exerciseChartEl  = document.getElementById('exercise-chart');
      const readyButtonEl    = document.getElementById('ready-button');

      const prepTimerEl      = document.getElementById('prep-timer');
      const prepRemainingEl  = document.getElementById('prep-remaining');

      const timerEl          = document.getElementById('timer');
      const timeRemainingEl  = document.getElementById('time-remaining');

      const restTimerEl      = document.getElementById('rest-timer');
      const restRemainingEl  = document.getElementById('rest-remaining');

      const inputFormEl      = document.getElementById('input-form');
      const weightInputEl    = document.getElementById('weight-input');
      const repsInputEl      = document.getElementById('reps-input');
      const feedbackMessageEl= document.getElementById('feedback-message');

      const countdownAudio   = document.getElementById('countdown');
      const bell             = document.getElementById('bell');
      const halfwaySound     = document.getElementById('halfway-sound');
      const silentAudio      = document.getElementById('silent-audio');

      if(!workout || workout.length === 0){
        window.location.href = '/generate-workout';
      }

      // Build 4×3 table for Type1
      function buildType1Table(ex) {
        const bestW = ex.maxWeight || 0;
        const bestR = ex.repsAtMax || 0;
        return `
          <table class="type1-table">
            <tr class="best-row">
              <td>BEST SET</td>
              <td>${bestW} lbs</td>
              <td>${bestR} reps</td>
            </tr>
            <tr>
              <td>SET 1 (70%)</td>
              <td>${roundToNearest5(bestW*0.70)} lbs</td>
              <td>10-12 reps</td>
            </tr>
            <tr>
              <td>SET 2 (85%)</td>
              <td>${roundToNearest5(bestW*0.85)} lbs</td>
              <td>10-12 reps</td>
            </tr>
            <tr>
              <td>SET 3 (100%)</td>
              <td>${roundToNearest5(bestW*1.00)}+ lbs</td>
              <td>${bestR}+ reps</td>
            </tr>
          </table>
        `;
      }
      function fetchPreviousPerformance(ex) {
        if (ex.lastPerformance) {
          return `Avg Weight: ${ex.lastPerformance.averageWeight} lbs<br>Avg Reps: ${ex.lastPerformance.averageReps}`;
        }
        return 'No performance data available';
      }

      function initExerciseInfo(){
        const ex = workout[currentExerciseIndex];
        const { sets } = EXERCISE_INFO[currentExerciseIndex];
        exerciseHeadingEl.innerHTML = `${ex.exercise_name} - Set ${currentSet} of ${sets}`;

        if (ex.type === 'type1' && ex.maxWeight !== undefined) {
          exerciseChartEl.innerHTML = buildType1Table(ex);
        } else {
          if (ex.lastPerformance) {
            exerciseChartEl.innerHTML = fetchPreviousPerformance(ex);
          } else {
            exerciseChartEl.innerHTML = 'No performance data available';
          }
        }
      }

      window.addEventListener('DOMContentLoaded', () => {
        initExerciseInfo();
      });

      function updateExerciseHeading(){
        const ex = workout[currentExerciseIndex];
        const { sets } = EXERCISE_INFO[currentExerciseIndex];
        exerciseHeadingEl.innerHTML = `${ex.exercise_name} - Set ${currentSet} of ${sets}`;
      }

      function readyButtonClicked(){
        readyButtonEl.style.display='none';
        startPrepTimer();
      }
      function startPrepTimer(){
        prepTimerEl.style.display='block';
        prepInterval=setInterval(()=>{
          prepTimeRemaining--;
          prepRemainingEl.innerText=prepTimeRemaining;
          if(prepTimeRemaining===5){
            countdownAudio.currentTime=0;
            countdownAudio.play();
          }
          if(prepTimeRemaining<=0){
            clearInterval(prepInterval);
            prepTimerEl.style.display='none';
            startTimer();
          }
        },1000);
      }

      function startTimer(){
        updateExerciseHeading();
        timerEl.style.display='block';

        const ex=workout[currentExerciseIndex];
        const { exerciseDuration } = EXERCISE_INFO[currentExerciseIndex];
        timeRemaining=exerciseDuration;
        timeRemainingEl.innerText=timeRemaining;
        halfwayPlayed=false;

        if(ex.type==='type1' && ex.maxWeight!==undefined){
          if(!document.getElementById('repAnimationContainer')){
            addRepAnimation();
          }
        } else {
          removeRepAnimationIfPresent();
        }

        timerInterval=setInterval(()=>{
          timeRemaining--;
          timeRemainingEl.innerText=timeRemaining;

          const halfwayMarker=Math.floor(exerciseDuration/2);
          if(!halfwayPlayed && timeRemaining===halfwayMarker){
            halfwaySound.currentTime=0;
            halfwaySound.play();
            halfwayPlayed=true;
          }
          if(timeRemaining===5){
            countdownAudio.currentTime=0;
            countdownAudio.play();
          }
          if(timeRemaining<=0){
            clearInterval(timerInterval);
            bell.currentTime=0;
            bell.play();
            removeRepAnimationIfPresent();
            showInputForm();
          }
        },1000);
      }

      function addRepAnimation(){
        const repAnimContainer=document.createElement('div');
        repAnimContainer.id="repAnimationContainer";
        repAnimContainer.className="rep-animation-container";

        const verticalBar=document.createElement('div');
        verticalBar.className="vertical-bar";
        const verticalFill=document.createElement('div');
        verticalFill.className="vertical-fill";
        verticalBar.appendChild(verticalFill);

        const repCountdownText=document.createElement('div');
        repCountdownText.id="repCountdownText";
        repCountdownText.className="rep-countdown";
        repCountdownText.innerText="4";

        repAnimContainer.appendChild(verticalBar);
        repAnimContainer.appendChild(repCountdownText);
        exerciseInfoEl.appendChild(repAnimContainer);

        startRepCountdown();
      }
      function removeRepAnimationIfPresent(){
        const anim=document.getElementById('repAnimationContainer');
        if(anim){
          anim.remove();
          clearInterval(repCountdownInterval);
        }
      }
      function startRepCountdown(){
        let repCycleTime=0;
        repCountdownInterval=setInterval(()=>{
          repCycleTime=(repCycleTime+1)%5;
          const repTextElem=document.getElementById('repCountdownText');
          if(repTextElem){
            if(repCycleTime<4){
              repTextElem.innerText=4-repCycleTime;
            } else {
              repTextElem.innerText="UP";
            }
          }
        },1000);
      }

      function showInputForm(){
        inputFormEl.style.display='block';
        weightInputEl.value='';
        repsInputEl.value='';
        feedbackMessageEl.innerText='';
        weightInputEl.focus();
      }
      async function submitSetData(){
        const weightStr=weightInputEl.value;
        const repsStr=repsInputEl.value;
        if(!weightStr||!repsStr){
          alert('Please enter valid weight and reps');
          return;
        }
        const weight=Number(weightStr), reps=Number(repsStr);
        if(isNaN(weight)||isNaN(reps)){
          alert('Please enter valid weight and reps');
          return;
        }
        const ex=workout[currentExerciseIndex];
        try{
          const saveResp=await fetch('/save-workout',{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({
              exercise_name:ex.exercise_name,
              muscle_group:ex.muscle_group,
              weight,
              reps
            })
          });
          if(!saveResp.ok){
            alert('Error saving data');
            return;
          }
          const perfResp=await fetch('/get-updated-performance',{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({ exercise_name:ex.exercise_name })
          });
          if(!perfResp.ok){
            alert('Error fetching updated performance');
            return;
          }
          const perfData=await perfResp.json();
          ex.lastPerformance=perfData.lastPerformance;

          feedbackMessageEl.innerText='Data saved!';
          setTimeout(()=>{
            feedbackMessageEl.innerText='';
            proceedToNextSetOrExercise();
          },1000);
        } catch(err){
          console.error('Error saving/fetching data:', err);
          alert('Error saving/fetching data');
        }
      }

      function proceedToNextSetOrExercise(){
        const { sets, intraRest, postExerciseRest } = EXERCISE_INFO[currentExerciseIndex];
        inputFormEl.style.display='none';
        timerEl.style.display='none';

        if(currentSet<sets){
          currentSet++;
          startRestTimer(intraRest);
        } else {
          currentSet=1;
          currentExerciseIndex++;
          if(currentExerciseIndex>=EXERCISE_INFO.length){
            window.location.href='/workout-complete';
          } else {
            initExerciseInfo();
            startNextExercisePreview(postExerciseRest||60);
          }
        }
      }

      function startRestTimer(duration){
        updateExerciseHeading();
        restTimerEl.style.display='block';
        restTimeRemaining=duration;
        restRemainingEl.innerText=restTimeRemaining;

        clearInterval(restInterval);
        restInterval=setInterval(()=>{
          restTimeRemaining--;
          restRemainingEl.innerText=restTimeRemaining;
          if(restTimeRemaining===5){
            countdownAudio.currentTime=0;
            countdownAudio.play();
          }
          if(restTimeRemaining<=0){
            clearInterval(restInterval);
            restTimerEl.style.display='none';
            startTimer();
          }
        },1000);
      }

      function startNextExercisePreview(prepDuration){
        prepTimeRemaining=prepDuration;
        prepTimerEl.style.display='block';

        prepInterval=setInterval(()=>{
          prepTimeRemaining--;
          prepRemainingEl.innerText=prepTimeRemaining;
          if(prepTimeRemaining===5){
            countdownAudio.currentTime=0;
            countdownAudio.play();
          }
          if(prepTimeRemaining<=0){
            clearInterval(prepInterval);
            prepTimerEl.style.display='none';
            startTimer();
          }
        },1000);
      }
    </script>
  </div>
</body>
</html>